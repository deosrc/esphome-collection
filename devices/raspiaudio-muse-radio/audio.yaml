esphome:
  on_boot:
    priority: 800.0
    then:
      - script.execute:
          id: set_volume
          volume: !lambda return id(default_volume).state;
          suppress_overlay: true

i2s_audio:
  - id: i2s_shared
    i2s_lrclk_pin: GPIO16
    i2s_bclk_pin: GPIO5
    i2s_mclk_pin: GPIO0

es8388:
  preset: raspiaudio_radio

output:
  - platform: gpio
    id: dac_mute
    pin:
      number: GPIO46
      inverted: true
      mode:
        output: true
      allow_other_uses: true

microphone:
  - platform: i2s_audio
    id: mic
    i2s_din_pin: GPIO4
    adc_type: external
    pdm: false

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO10
      inverted: true
      mode:
        input: true
        pullup: true
    id: jack_plugged
    name: Jack plugged in
    filters:
      - delayed_on_off: 0.3s
    on_state:
      then:
        - script.execute: update_dac_mute
  - id: !extend volume_button
    internal: true
    on_click:
      then:
        - logger.log:
            format: Muting media player
            tag: volume_button
            level: INFO
        - script.execute:
            id: set_volume
            volume: 0
            suppress_overlay: false

media_player:
  - platform: i2s_audio
    id: player
    name: None
    dac_type: external
    i2s_dout_pin: GPIO17
    i2s_audio_id: i2s_shared
    mode: mono
    mute_pin:
      number: GPIO46
      inverted: true
      mode:
        output: true
      allow_other_uses: true

number:
  - platform: template
    id: default_volume
    name: Default Volume
    entity_category: config
    optimistic: true
    restore_value: true
    initial_value: 30
    min_value: 0
    max_value: 100
    step: 1

script:
  - id: set_volume
    mode: restart
    parameters:
      volume: int
      suppress_overlay: bool
    then:
      - logger.log:
          format: Setting volume %d
          args:
            - volume
          tag: set_volume
          level: INFO
      - sensor.rotary_encoder.set_value:
          id: volume_encoder
          value: !lambda return volume / 5.0f;
      - media_player.volume_set:
          id: player
          volume: !lambda return volume / 100.0f;
      - if:
          condition:
            - lambda: return !suppress_overlay;
          then:
            - script.execute: trigger_volume_overlay

  - id: update_dac_mute
    then:
      - if:
          condition:
            and:
              - media_player.is_playing
              - binary_sensor.is_off: jack_plugged
          then:
            - logger.log: "Turn off DAC mute"
            - output.turn_off: dac_mute
          else:
            - logger.log: "Turn on DAC mute"
            - output.turn_on: dac_mute
