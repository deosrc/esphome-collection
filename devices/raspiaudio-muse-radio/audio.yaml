esphome:
  on_boot:
    priority: 800.0
    then:
      - script.execute:
          id: set_volume
          volume: !lambda return id(default_volume).state;
          suppress_overlay: true

i2s_audio:
  - id: i2s_shared
    i2s_lrclk_pin: GPIO16
    i2s_bclk_pin: GPIO5
    i2s_mclk_pin: GPIO0

output:
  - platform: gpio
    id: dac_mute
    pin:
      number: GPIO46
      inverted: true
      mode:
        output: true
      allow_other_uses: true

microphone:
  - platform: i2s_audio
    id: mic
    i2s_din_pin: GPIO4
    adc_type: external
    pdm: false

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO10
      inverted: true
      mode:
        input: true
        pullup: true
    id: jack_plugged
    name: Jack plugged in
    filters:
      - delayed_on_off: 0.3s
    on_state:
      then:
        - script.execute: update_dac_mute
  - id: !extend volume_button
    internal: true
    on_click:
      then:
        - logger.log:
            format: Muting media player
            tag: volume_button
            level: INFO
        - script.execute:
            id: set_volume
            volume: 0
            suppress_overlay: false

sensor:
  - id: !extend volume_encoder
    internal: true
    min_value: 0
    max_value: 20
    on_value:
      then:
        - script.execute:
            id: set_volume
            volume: !lambda return x * 5;
            suppress_overlay: false

media_player:
  - platform: i2s_audio
    id: player
    name: None
    dac_type: external
    i2s_dout_pin: GPIO17
    i2s_audio_id: i2s_shared
    mode: mono
    mute_pin:
      number: GPIO46
      inverted: true
      mode:
        output: true
      allow_other_uses: true

number:
  - platform: template
    id: default_volume
    name: Default Volume
    entity_category: config
    optimistic: true
    restore_value: true
    initial_value: 30
    min_value: 0
    max_value: 100
    step: 1

globals:
  - id: show_volume_overlay
    type: bool
    restore_value: false
    initial_value: "false"

font:
  - id: font_volume
    file:
      type: gfonts
      family: Ubuntu
      weight: 500
    glyphs: "0123456789"
    size: 16

script:
  - id: set_volume
    mode: restart
    parameters:
      volume: int
      suppress_overlay: bool
    then:
      - logger.log:
          format: Setting volume %d
          args:
            - volume
          tag: set_volume
          level: INFO
      - sensor.rotary_encoder.set_value:
          id: volume_encoder
          value: !lambda return volume / 5.0f;
      - media_player.volume_set:
          id: player
          volume: !lambda return volume / 100.0f;
      - if:
          condition:
            - lambda: return !suppress_overlay;
          then:
            - globals.set:
                id: show_volume_overlay
                value: "true"
      - script.execute: update_display
      - delay: 3s
      - globals.set:
          id: show_volume_overlay
          value: "false"
      - script.execute: update_display

  - id: update_dac_mute
    then:
      - if:
          condition:
            and:
              - media_player.is_playing
              - binary_sensor.is_off: jack_plugged
          then:
            - logger.log: "Turn off DAC mute"
            - output.turn_off: dac_mute
          else:
            - logger.log: "Turn on DAC mute"
            - output.turn_on: dac_mute
  - id: draw_volume_overlay
    then:
      - lambda: |-
          if (id(show_volume_overlay)) {
            int margin = 20;
            int width = 40;
            int start = id(screen).get_width() - margin - width;
            int top = margin;
            int height = id(screen).get_height() - (margin * 2);
            int text_height = 25;
            int padding = 10;

            // Draw overlay background
            id(screen).rectangle(start, top, width, height, Color::BLACK);
            id(screen).filled_rectangle(start + 1, top + 1, width - 2, height - 2, Color::WHITE);

            int volume = id(volume_encoder).state * 5;
            volume = volume > 100 ? 0 : volume;
            ESP_LOGD("volume_overlay", "Volume: %i", volume);
            id(screen).printf(start + (width / 2), top + height - text_height, id(font_volume), Color::BLACK, TextAlign::TOP_CENTER, "%i", volume);

            int volume_bar_width = 8;
            int volume_bar_start = start + ((width - volume_bar_width) / 2);
            int volume_bar_top = top + padding;
            int volume_bar_height = height - text_height - (padding * 2);
            id(screen).rectangle(volume_bar_start, volume_bar_top, volume_bar_width, volume_bar_height, Color::BLACK);

            int volume_bar_fill_height = (volume_bar_height - 2) * (volume / 100.0f);
            int volume_bar_fill_top = volume_bar_top + volume_bar_height - volume_bar_fill_height - 1;
            id(screen).filled_rectangle(volume_bar_start + 1, volume_bar_fill_top, volume_bar_width - 2, volume_bar_fill_height, Color(0,0,255));
          }
